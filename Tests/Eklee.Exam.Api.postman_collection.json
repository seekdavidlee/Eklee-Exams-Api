{
	"info": {
		"_postman_id": "e5d22750-295a-42bd-8bca-d80aa8584865",
		"name": "Eklee.Exam.Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PrepareOrganizations",
			"item": [
				{
					"name": "LoginAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contans access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"admin_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_secret",
									"value": "{{adminClientSecret}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{adminClientId}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{adminUser1}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{adminUser1password}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{adminResourceId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{adminId}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{adminId}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchCreateOrUpdateOrganizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateOrUpdateOrganization.length).to.eql(2);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation{\r\n  batchCreateOrUpdateOrganization(organization:[{\r\n    id: \"A04F99BC-1C53-4234-8FBD-ED224D220E8B\"\r\n    name:\"Eklee Tenant 1\"\r\n    tenantId:\"41af87cc-57c9-4f69-a6a8-dc207f5e3564\"\r\n    type:\"Business\"\r\n  },{\r\n      id: \"650852C7-CB0E-433A-A30E-EE748F2A7090\"\r\n    \tname:\"Eklee Tenant 2\"\r\n    \ttenantId:\"64dccffb-518a-4a84-8e17-c2e57973b2b9\"\r\n    \ttype:\"Educational\"  \r\n  }]){\r\n    id\r\n    name\r\n    tenantId\r\n    type\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/appadmin",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"appadmin"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllOrganizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getAllOrganizations.length).to.eql(2);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  getAllOrganizations{\r\n    id\r\n    tenantId\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/appadmin",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"appadmin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contans access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_secret",
									"value": "{{clientSecret}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{clientId}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{tenant1user1}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{tenant1user1password}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{resourceId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{tenant1Id}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{tenant1Id}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSchema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":\"IntrospectionQuery\",\"variables\":{},\"query\":\"query IntrospectionQuery {\\n  __schema {\\n    queryType {\\n      name\\n    }\\n    mutationType {\\n      name\\n    }\\n    subscriptionType {\\n      name\\n    }\\n    types {\\n      ...FullType\\n    }\\n    directives {\\n      name\\n      description\\n      locations\\n      args {\\n        ...InputValue\\n      }\\n    }\\n  }\\n}\\n\\nfragment FullType on __Type {\\n  kind\\n  name\\n  description\\n  fields(includeDeprecated: true) {\\n    name\\n    description\\n    args {\\n      ...InputValue\\n    }\\n    type {\\n      ...TypeRef\\n    }\\n    isDeprecated\\n    deprecationReason\\n  }\\n  inputFields {\\n    ...InputValue\\n  }\\n  interfaces {\\n    ...TypeRef\\n  }\\n  enumValues(includeDeprecated: true) {\\n    name\\n    description\\n    isDeprecated\\n    deprecationReason\\n  }\\n  possibleTypes {\\n    ...TypeRef\\n  }\\n}\\n\\nfragment InputValue on __InputValue {\\n  name\\n  description\\n  type {\\n    ...TypeRef\\n  }\\n  defaultValue\\n}\\n\\nfragment TypeRef on __Type {\\n  kind\\n  name\\n  ofType {\\n    kind\\n    name\\n    ofType {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoginAdminService",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contans access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"adminsvc_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_secret",
									"value": "{{adminClientSecret}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{adminClientId}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{adminResourceId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{adminId}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{adminId}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SeedDatabase",
			"item": [
				{
					"name": "BatchCreateEmployees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateEmployee.length).to.eql(5);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');",
									"",
									"for(var i = 0; i < 10; i++) {",
									"    pm.environment.set(\"employeeId\" + i, uuid.v4());    ",
									"}",
									"",
									" ",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Write your query or mutation here\r\nmutation {\r\n  batchCreateEmployee(employee:[{\r\n    id:\"{{employeeId0}}\"\r\n    firstName:\"James\"\r\n    lastName:\"McDonald\"\r\n    department:\"Dev\"\r\n    email:\"jm@eklee1.com\"\r\n    active: true\r\n    created:\"2019-07-07\"\r\n    type:\"fulltime\"\r\n  },\r\n  {\r\n    id:\"{{employeeId1}}\"\r\n    firstName:\"Lisa\"\r\n    lastName:\"Cane\"\r\n    department:\"Dev\"\r\n    email:\"lcane@eklee1.com\"\r\n    active: true\r\n    created:\"2019-07-07\"\r\n    type:\"fulltime\"\r\n  },\r\n  {\r\n    id:\"{{employeeId2}}\"\r\n    firstName:\"Becky\"\r\n    lastName:\"Thames\"\r\n    department:\"Dev\"\r\n    email:\"bthames@eklee1.com\"\r\n    active: true\r\n    created:\"2019-07-07\"\r\n    type:\"parttime\"\r\n  },\r\n  {\r\n    id:\"{{employeeId3}}\"\r\n    firstName:\"Ken\"\r\n    lastName:\"Fu\"\r\n    department:\"Dev\"\r\n    email:\"kfu@eklee1.com\"\r\n    active: true\r\n    created:\"2019-07-07\"\r\n    type:\"contractor\"\r\n  },\r\n  {\r\n    id:\"{{employeeId4}}\"\r\n    firstName:\"Mohammad\"\r\n    lastName:\"Ash\"\r\n    department:\"Dev\"\r\n    email:\"mash@eklee1.com\"\r\n    active: true\r\n    created:\"2019-07-07\"\r\n    type:\"intern\"\r\n  }]){\r\n    id\r\n    firstName\r\n    lastName\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchCreateExams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var examIdList = [];",
									"    for(var i = 0; i < 10; i++) {",
									"        examIdList.push(pm.environment.get(\"examId\" + i));",
									"    }",
									"    ",
									"    pm.expect(jsonData.data.batchCreateOrUpdateExam.length).to.eql(3);",
									"    pm.expect(jsonData.data.batchCreateOrUpdateExam[0].id).to.eql(examIdList[0]);",
									"    pm.expect(jsonData.data.batchCreateOrUpdateExam[1].id).to.eql(examIdList[1]);",
									"    pm.expect(jsonData.data.batchCreateOrUpdateExam[2].id).to.eql(examIdList[2]);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');",
									"for(var i = 0; i < 10; i++) {",
									"    ",
									"    var examKey = \"examId\" + i;",
									"    pm.environment.set(examKey, uuid.v4());",
									"    ",
									"    for(var p = 0; p < 10; p++){",
									"        var pubKey = \"examId\" + i + \"pubId\" + p;",
									"        pm.environment.set(pubKey, uuid.v4());",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  batchCreateOrUpdateExam(exam:[{\r\n    id:\"{{examId0}}\"\r\n    name:\"exam 1 from eklee1\"\r\n    category:\"r1\"\r\n    created: \"2019-07-06\"\r\n    publications: [{\r\n      id:\"{{examId0pubId0}}\"\r\n      published:\"2019-01-01\"\r\n      retired: \"2020-12-31\"\r\n      publication: {\r\n        id:\"FF440B11-25C2-4DBD-9E77-35A8B7133719\"\r\n        year:2019\r\n        questions:[{\r\n          id:\"632558B4-3271-48F5-9C75-C6F26222E45F\"\r\n          answer:\"F62828CB-ABF0-43C3-AFD9-2B58B7D513CD\"\r\n          text:\"What is the correct choice?\"\r\n          choices:[\r\n            {\r\n              id:\"F62828CB-ABF0-43C3-AFD9-2B58B7D513CD\"\r\n              text:\"Choice A\"\r\n            },\r\n            {\r\n              id:\"72FE70E6-EF2D-445F-BCFD-D6B1735FE7F3\"\r\n              text:\"Choice B\"\r\n            }\r\n          ]\r\n        \r\n        }]\r\n      }\r\n    }]\r\n  },{\r\n    id:\"{{examId1}}\"\r\n    name:\"exam 2 from eklee1\"\r\n    category:\"r2\"\r\n    created: \"2018-12-12\"\r\n  },\r\n  {\r\n    id:\"{{examId2}}\"\r\n    name:\"exam 3 from eklee1\"\r\n    category:\"r3\"\r\n    created: \"2019-01-01\"\r\n  }]){\r\n  \tid\r\n    name\r\n    category\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SimpleCRUD",
			"item": [
				{
					"name": "CreateExam",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var testName = pm.info.requestName + \": \";",
									"",
									"pm.test(testName + \"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(testName + \"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    console.log(jsonData);",
									"    ",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(testName + \"Exam is created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var id = pm.environment.get(\"createExamId\");",
									"    var entity = jsonData.data.createExam;",
									"    pm.expect(entity.id).to.eql(id);",
									"    pm.expect(entity.name).to.eql(\"MS Azure SQL Database\");",
									"    pm.expect(entity.category).to.eql(\"Azure\");",
									"    pm.expect(entity.created).to.eql(\"2018-01-01T00:00:00Z\");",
									"    pm.expect(entity.publications.length).to.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set(\"createExamId\", uuid.v4());",
									"",
									"pm.environment.set(\"pub1Id\", uuid.v4());",
									"pm.environment.set(\"qnsId\", uuid.v4());",
									"",
									"pm.environment.set(\"choice1Id\", uuid.v4());",
									"pm.environment.set(\"choice2Id\", uuid.v4());",
									"pm.environment.set(\"choice3Id\", uuid.v4());",
									"pm.environment.set(\"choice4Id\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  createExam(exam:{\r\n    id:\"{{createExamId}}\"\r\n    name:\"MS Azure SQL Database\"\r\n    created:\"2018-01-01\"\r\n    category:\"Azure\"\r\n    publications:[\r\n      {\r\n        id:\"{{pub1Id}}\"\r\n        published:\"2019-12-31\"\r\n        retired:\"2020-12-31\"\r\n        publication:{\r\n          id:\"{{pub1Id}}\"\r\n          year:2019\r\n          questions:[\r\n            {\r\n              id:\"{{qnsId}}\"\r\n              answer:\"{{choice2Id}}\"\r\n              text:\"What is 1 + 1\"              \r\n              choices:[\r\n                {\r\n                  id:\"{{choice1Id}}\"\r\n                  text:\"4\"\r\n                },\r\n                {\r\n                  id:\"{{choice2Id}}\"\r\n                  text:\"2\"\r\n                }\r\n                {\r\n                  id:\"{{choice3Id}}\"\r\n                  text:\"3\"\r\n                }\r\n                {\r\n                  id:\"{{choice4Id}}\"\r\n                  text:\"1\"\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  }){\r\n    id\r\n    name\r\n    category\r\n    created\r\n    publications {\r\n    \tid\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateTestResult",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"TestResult is created\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var id = pm.environment.get(\"testResultId0\");",
									"",
									"    var examId = pm.environment.get(\"examId0pubId0\");",
									"    ",
									"    var entity = jsonData.data.createTestResult;",
									"    pm.expect(entity.id).to.eql(id);",
									"    pm.expect(entity.location).to.eql(\"Dallas, TX\");",
									"    pm.expect(entity.correctAnswers).to.eql(1);",
									"    pm.expect(entity.totalQuestions).to.eql(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set(\"testResultId0\", uuid.v4());",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  createTestResult(testresult:{\r\n    id:\"{{testResultId0}}\"\r\n    location:\"Dallas, TX\"\r\n    publication:{\r\n      id:\"{{examId0pubId0}}\"\r\n    }\r\n    correctAnswers: 1\r\n    totalQuestions: 1\r\n    candidate:{\r\n      id:\"{{employeeId0}}\"\r\n      taken:\"2019-07-10\"\r\n    }\r\n  }){\r\n\tid\r\n\tlocation\r\n\tcorrectAnswers\r\n\ttotalQuestions\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryTestResult",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"TestResult is found\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var id = pm.environment.get(\"testResultId0\");",
									"",
									"    var examId = pm.environment.get(\"examId0pubId0\");",
									"    ",
									"    var entity = jsonData.data.getTestResultById;",
									"    pm.expect(entity.id).to.eql(id);",
									"    pm.expect(entity.location).to.eql(\"Dallas, TX\");",
									"    pm.expect(entity.correctAnswers).to.eql(1);",
									"    pm.expect(entity.totalQuestions).to.eql(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\n  getTestResultById(id:{equal:\"{{testResultId0}}\"}){\n\tid\n\tlocation\n\tcorrectAnswers\n\ttotalQuestions\n\tcandidate {\n\t\tid\n\t\ttaken\n\t\temployee {\n        \tfirstName\n      }\t\t\n\t}\n  }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryTestResultByCandidateId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"TestResult is found\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var id = pm.environment.get(\"testResultId0\");",
									"    var employeeId0 = pm.environment.get(\"employeeId0\");",
									"    var examId0pubId0 = pm.environment.get(\"examId0pubId0\");",
									"    var examId = pm.environment.get(\"examId0pubId0\");",
									"    ",
									"    var entity = jsonData.data.getTestResultByCandidateById;",
									"    pm.expect(entity.id).to.eql(id);",
									"    pm.expect(entity.location).to.eql(\"Dallas, TX\");",
									"    pm.expect(entity.correctAnswers).to.eql(1);",
									"    pm.expect(entity.totalQuestions).to.eql(1);",
									"    pm.expect(entity.candidate.id).to.eql(employeeId0);",
									"    pm.expect(entity.publication.id).to.eql(examId0pubId0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\n  getTestResultByCandidateById(destinationid:{equal:\"{{employeeId0}}\"}){\n    id\n    correctAnswers\n    location\n    publication {\n      id\n    }\n    totalQuestions\n    candidate {\n      id\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTestResultsByCandidateFirstNameAndTaken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"TestResult is found\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var id = pm.environment.get(\"testResultId0\");",
									"    var employeeId0 = pm.environment.get(\"employeeId0\");",
									"    var examId0pubId0 = pm.environment.get(\"examId0pubId0\");",
									"    var examId = pm.environment.get(\"examId0pubId0\");",
									"    ",
									"    var entities = jsonData.data.getTestResultsByCandidateFirstNameAndTaken;",
									"    pm.expect(entities.length).to.eql(1);",
									"    var entity = entities[0];",
									"    ",
									"    pm.expect(entity.id).to.eql(id);",
									"    pm.expect(entity.location).to.eql(\"Dallas, TX\");",
									"    pm.expect(entity.correctAnswers).to.eql(1);",
									"    pm.expect(entity.totalQuestions).to.eql(1);",
									"    pm.expect(entity.candidate.id).to.eql(employeeId0);",
									"    pm.expect(entity.candidate.employee.id).to.eql(employeeId0);",
									"    ",
									"    var employee = entity.candidate.employee;",
									"    pm.expect(employee.firstName).to.eql(\"James\");",
									"    pm.expect(employee.lastName).to.eql(\"McDonald\");",
									"    pm.expect(employee.email).to.eql(\"jm@eklee1.com\");",
									"    pm.expect(employee.department).to.eql(\"Dev\");",
									"    pm.expect(employee.type).to.eql(\"fulltime\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  getTestResultsByCandidateFirstNameAndTaken(firstname:\r\n    {\r\n      equal:\"James\"\r\n    }, taken:\r\n    {\r\n      greaterThan:\"2019-07-01\"\r\n    }){\r\n    id\r\n    correctAnswers\r\n    totalQuestions\r\n    location\r\n    candidate {\r\n      employee {\r\n        firstName\r\n        lastName\r\n        email\r\n        department\r\n        id\r\n        type\r\n      }\r\n      taken\r\n      id\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateTestResult",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"TestResult is updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var id = pm.environment.get(\"testResultId0\");",
									"    ",
									"    var entity = jsonData.data.updateTestResult;",
									"    pm.expect(entity.id).to.eql(id);",
									"    pm.expect(entity.location).to.eql(\"Dallas, TX\");",
									"    pm.expect(entity.correctAnswers).to.eql(2);",
									"    pm.expect(entity.totalQuestions).to.eql(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  updateTestResult(testresult:{\r\n    id:\"{{testResultId0}}\"\r\n    correctAnswers:2\r\n    totalQuestions:3\r\n    location:\"Dallas, TX\"\r\n  }){\r\n    id\r\n    correctAnswers\r\n    totalQuestions\r\n    location\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "VerifyTestResultWasUpdated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"TestResult is updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var id = pm.environment.get(\"testResultId0\");",
									"    ",
									"    var entity = jsonData.data.getTestResultById;",
									"    pm.expect(entity.id).to.eql(id);",
									"    pm.expect(entity.location).to.eql(\"Dallas, TX\");",
									"    pm.expect(entity.correctAnswers).to.eql(2);",
									"    pm.expect(entity.totalQuestions).to.eql(3);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\n  getTestResultById(id:{equal:\"{{testResultId0}}\"}){\n    id\n    correctAnswers\n    totalQuestions\n    location\n  }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchExams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(null);",
									"});",
									"",
									"pm.test(\"TestResult is updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.data.searchExams.length).to.eql(1);",
									"    ",
									"    var id = pm.environment.get(\"testResultId0\");",
									"    ",
									"    var entity = jsonData.data.searchExams[0];",
									"    pm.expect(entity.id).to.eql(id);",
									"    pm.expect(entity.candidate.employee.firstName).to.eql(\"James\");",
									"    pm.expect(entity.candidate.employee.lastName).to.eql(\"McDonald\");",
									"    pm.expect(entity.candidate.employee.email).to.eql(\"jm@eklee1.com\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/graphql"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  searchExams(searchtext:{equal:\"eklee1\"}){\r\n    id\r\n    candidate {\r\n      employee {\r\n        firstName\r\n        lastName\r\n        email\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "DeleteAllExams",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllExam {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteAllEmployees",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllEmployee {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteAllTestResults",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllTestResult {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteAllPublications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllPublication {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteAllOrganizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  deleteAllOrganization{\r\n    message\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/appadmin",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"appadmin"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"var isRemote = pm.environment.get(\"endpoint\").indexOf(\"http://localhost\") < 0;",
					"pm.environment.set(\"isRemote\", isRemote);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}