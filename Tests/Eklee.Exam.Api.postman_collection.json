{
	"info": {
		"_postman_id": "e5d22750-295a-42bd-8bca-d80aa8584865",
		"name": "Eklee.Exam.Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PrepareOrganizations",
			"item": [
				{
					"name": "LoginAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecafb857-fc97-4b64-80a1-6ffa2c75d986",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contans access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"admin_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_secret",
									"value": "{{adminClientSecret}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{adminClientId}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{adminUser1}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{adminUser1password}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{adminResourceId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{adminId}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{adminId}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchCreateOrganizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "929a7a0e-b78f-4fdf-ae79-2094882d03c4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(undefined);",
									"});",
									"",
									"pm.test(\"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateOrUpdateOrganization.length).to.eql(2);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation{\r\n  batchCreateOrUpdateOrganization(organization:[{\r\n    id: \"A04F99BC-1C53-4234-8FBD-ED224D220E8B\"\r\n    name:\"Eklee Tenant 1\"\r\n    tenantId:\"41af87cc-57c9-4f69-a6a8-dc207f5e3564\"\r\n    type:\"Business\"\r\n  },{\r\n      id: \"650852C7-CB0E-433A-A30E-EE748F2A7090\"\r\n    \tname:\"Eklee Tenant 2\"\r\n    \ttenantId:\"64dccffb-518a-4a84-8e17-c2e57973b2b9\"\r\n    \ttype:\"Educational\"  \r\n  }]){\r\n    id\r\n    name\r\n    tenantId\r\n    type\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/appadmin",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"appadmin"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllOrganizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "929a7a0e-b78f-4fdf-ae79-2094882d03c4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(undefined);",
									"});",
									"",
									"pm.test(\"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getAllOrganizations.length).to.eql(2);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query {\r\n  getAllOrganizations{\r\n    id\r\n    tenantId\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/appadmin",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"appadmin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecafb857-fc97-4b64-80a1-6ffa2c75d986",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contans access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_secret",
									"value": "{{clientSecret}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{clientId}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "{{tenant1user1}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{tenant1user1password}}",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{resourceId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{tenant1Id}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{tenant1Id}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSchema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5dab6571-3ead-40f8-9049-95fafe47e5a2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":\"IntrospectionQuery\",\"variables\":{},\"query\":\"query IntrospectionQuery {\\n  __schema {\\n    queryType {\\n      name\\n    }\\n    mutationType {\\n      name\\n    }\\n    subscriptionType {\\n      name\\n    }\\n    types {\\n      ...FullType\\n    }\\n    directives {\\n      name\\n      description\\n      locations\\n      args {\\n        ...InputValue\\n      }\\n    }\\n  }\\n}\\n\\nfragment FullType on __Type {\\n  kind\\n  name\\n  description\\n  fields(includeDeprecated: true) {\\n    name\\n    description\\n    args {\\n      ...InputValue\\n    }\\n    type {\\n      ...TypeRef\\n    }\\n    isDeprecated\\n    deprecationReason\\n  }\\n  inputFields {\\n    ...InputValue\\n  }\\n  interfaces {\\n    ...TypeRef\\n  }\\n  enumValues(includeDeprecated: true) {\\n    name\\n    description\\n    isDeprecated\\n    deprecationReason\\n  }\\n  possibleTypes {\\n    ...TypeRef\\n  }\\n}\\n\\nfragment InputValue on __InputValue {\\n  name\\n  description\\n  type {\\n    ...TypeRef\\n  }\\n  defaultValue\\n}\\n\\nfragment TypeRef on __Type {\\n  kind\\n  name\\n  ofType {\\n    kind\\n    name\\n    ofType {\\n      kind\\n      name\\n      ofType {\\n        kind\\n        name\\n        ofType {\\n          kind\\n          name\\n          ofType {\\n            kind\\n            name\\n            ofType {\\n              kind\\n              name\\n              ofType {\\n                kind\\n                name\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoginAdminService",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecafb857-fc97-4b64-80a1-6ffa2c75d986",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Contans access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.environment.set(\"adminsvc_access_token\", jsonData.access_token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "client_secret",
									"value": "{{adminClientSecret}}",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "{{adminClientId}}",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								},
								{
									"key": "resource",
									"value": "{{adminResourceId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://login.microsoftonline.com/{{adminId}}/oauth2/token",
							"protocol": "https",
							"host": [
								"login",
								"microsoftonline",
								"com"
							],
							"path": [
								"{{adminId}}",
								"oauth2",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SeedDatabase",
			"item": [
				{
					"name": "BatchCreateEmployees",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "929a7a0e-b78f-4fdf-ae79-2094882d03c4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(undefined);",
									"});",
									"",
									"pm.test(\"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateEmployee.length).to.eql(5);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Write your query or mutation here\r\nmutation {\r\n  batchCreateEmployee(employee:[{\r\n    id:\"9FD7E57D-E875-41DD-B926-0F8C87FD401F\"\r\n    firstName:\"James\"\r\n    lastName:\"McDonald\"\r\n    department:\"Dev\"\r\n    email:\"jm@eklee1.com\"\r\n    active: true\r\n    created:\"2019-07-07\"\r\n    type:\"fulltime\"\r\n  },\r\n  {\r\n    id:\"0E2853F4-9A6C-4D7B-9980-18EFDEB51261\"\r\n    firstName:\"Lisa\"\r\n    lastName:\"Cane\"\r\n    department:\"Dev\"\r\n    email:\"lcane@eklee1.com\"\r\n    active: true\r\n    created:\"2019-07-07\"\r\n    type:\"fulltime\"\r\n  },\r\n  {\r\n    id:\"59E8C005-3817-4397-BFB9-EEC8F361CFB3\"\r\n    firstName:\"Becky\"\r\n    lastName:\"Thames\"\r\n    department:\"Dev\"\r\n    email:\"bthames@eklee1.com\"\r\n    active: true\r\n    created:\"2019-07-07\"\r\n    type:\"parttime\"\r\n  },\r\n  {\r\n    id:\"3FE6783D-3C64-4131-ACDC-223EFAD5F3D4\"\r\n    firstName:\"Ken\"\r\n    lastName:\"Fu\"\r\n    department:\"Dev\"\r\n    email:\"kfu@eklee1.com\"\r\n    active: true\r\n    created:\"2019-07-07\"\r\n    type:\"contractor\"\r\n  },\r\n  {\r\n    id:\"7113B1A7-885A-4B10-954A-2CC05EC4ABE6\"\r\n    firstName:\"Mohammad\"\r\n    lastName:\"Ash\"\r\n    department:\"Dev\"\r\n    email:\"mash@eklee1.com\"\r\n    active: true\r\n    created:\"2019-07-07\"\r\n    type:\"intern\"\r\n  }]){\r\n    id\r\n    firstName\r\n    lastName\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "BatchCreateExams",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "929a7a0e-b78f-4fdf-ae79-2094882d03c4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Has no errors\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(undefined);",
									"});",
									"",
									"pm.test(\"Contains correct JSON payload\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateOrUpdateExam.length).to.eql(3);",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  batchCreateOrUpdateExam(exam:[{\r\n    id:\"BCAD7AB0-5D75-49D9-80A2-BB03438147FB\"\r\n    name:\"exam 1 from eklee1\"\r\n    category:\"r1\"\r\n    created: \"2019-07-06\"\r\n    publications: [{\r\n      id:\"BCAD7AB0-5D75-49D9-80A2-BB03438147FB\"\r\n      published:\"2019-01-01\"\r\n      retired: \"2020-12-31\"\r\n      publication: {\r\n        id:\"FF440B11-25C2-4DBD-9E77-35A8B7133719\"\r\n        name:\"test1\"\r\n        testResults: []\r\n        questions:[{\r\n          id:\"632558B4-3271-48F5-9C75-C6F26222E45F\"\r\n          answer:\"F62828CB-ABF0-43C3-AFD9-2B58B7D513CD\"\r\n          text:\"What is the correct choice?\"\r\n          choices:[\r\n            {\r\n              id:\"F62828CB-ABF0-43C3-AFD9-2B58B7D513CD\"\r\n              text:\"Choice A\"\r\n            },\r\n            {\r\n              id:\"72FE70E6-EF2D-445F-BCFD-D6B1735FE7F3\"\r\n              text:\"Choice B\"\r\n            }\r\n          ]\r\n        \r\n        }]\r\n      }\r\n    }]\r\n  },{\r\n    id:\"10CF8832-91A5-439C-A6DE-CC41FE293098\"\r\n    name:\"exam 2 from eklee1\"\r\n    category:\"r2\"\r\n    created: \"2018-12-12\"\r\n  },\r\n  {\r\n    id:\"A7976078-7B4C-46DF-9A26-82410843D96D\"\r\n    name:\"exam 3 from eklee1\"\r\n    category:\"r3\"\r\n    created: \"2019-01-01\"\r\n  }]){\r\n  \tid\r\n    name\r\n    category\r\n  }\r\n}\r\n",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SimpleCRUD",
			"item": [
				{
					"name": "CreateExam",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35c8c12c-5cfe-42d0-8de3-66862da96f49",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(undefined);",
									"});",
									"",
									"pm.test(\"Exam is created\", function () {",
									"    var jsonData = pm.response.json();",
									"    var id = pm.environment.get(\"createExamId\");",
									"    var entity = jsonData.data.createExam;",
									"    pm.expect(entity.id).to.eql(id);",
									"    pm.expect(entity.name).to.eql(\"MS Azure SQL Database\");",
									"    pm.expect(entity.category).to.eql(\"Azure\");",
									"    pm.expect(entity.created).to.eql(\"2018-01-01\");",
									"    pm.expect(entity.publications.length).to.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f3d6edef-fd7e-4167-b32d-9aafbbf3a69b",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set(\"createExamId\", uuid.v4());",
									"",
									"pm.environment.set(\"pubId\", uuid.v4());",
									"pm.environment.set(\"qnsId\", uuid.v4());",
									"",
									"pm.environment.set(\"choice1Id\", uuid.v4());",
									"pm.environment.set(\"choice2Id\", uuid.v4());",
									"pm.environment.set(\"choice3Id\", uuid.v4());",
									"pm.environment.set(\"choice4Id\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\r\n  createExam(exam:{\r\n    id:\"{{createExamId}}\"\r\n    name:\"MS Azure SQL Database\"\r\n    created:\"2018-01-01\"\r\n    category:\"Azure\"\r\n    publications:[\r\n      {\r\n        id:\"{{createExamId}}\"\r\n        published:\"2019-12-31\"\r\n        retired:\"2020-12-31\"\r\n        publication:{\r\n          id:\"{{pubId}}\"\r\n          name:\"Math test 1 version 1\"\r\n          questions:[\r\n            {\r\n              id:\"{{qnsId}}\"\r\n              answer:\"{{choice2Id}}\"\r\n              text:\"What is 1 + 1\"              \r\n              choices:[\r\n                {\r\n                  id:\"{{choice1Id}}\"\r\n                  text:\"4\"\r\n                },\r\n                {\r\n                  id:\"{{choice2Id}}\"\r\n                  text:\"2\"\r\n                }\r\n                {\r\n                  id:\"{{choice3Id}}\"\r\n                  text:\"3\"\r\n                }\r\n                {\r\n                  id:\"{{choice4Id}}\"\r\n                  text:\"1\"\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      }\r\n    ]\r\n  }){\r\n    id\r\n    name\r\n    category\r\n    created\r\n    publications {\r\n    \tid\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateTestResult",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35c8c12c-5cfe-42d0-8de3-66862da96f49",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(undefined);",
									"});",
									"",
									"pm.test(\"TestResult is created\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var id = pm.environment.get(\"createTestResultId\");",
									"    var createCandidateId = pm.environment.get(\"createCandidateId\");",
									"    var createExamId = pm.environment.get(\"createExamId\");",
									"    ",
									"    var entity = jsonData.data.createTestResult;",
									"    pm.expect(entity.id).to.eql(id);",
									"    pm.expect(entity.name).to.eql(\"November Testing\");",
									"    pm.expect(entity.candidateId).to.eql(createCandidateId);",
									"    pm.expect(entity.category).to.eql(\"Cloud\");",
									"    pm.expect(entity.examId).to.eql(createExamId);",
									"    pm.expect(entity.taken).to.eql(\"2019-01-01\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "50d20ab9-c5ba-41d9-9739-f7f81ba8e22d",
								"exec": [
									"var uuid = require('uuid');",
									"pm.environment.set(\"createTestResultId\", uuid.v4());"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation {\n  createTestResult(testresult:{\n    id:\"{{createTestResultId}}\"\n    name:\"November Testing\"\n    candidateId:\"{{createCandidateId}}\"\n    category:\"Cloud\"\n    examId:\"{{createExamId}}\"\n    taken:\"2019-01-01\"\n  }){\n    id\n    name \n    candidateId\n    category\n    examId\n    taken\n  }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryTestResult",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35c8c12c-5cfe-42d0-8de3-66862da96f49",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(undefined);",
									"});",
									"",
									"pm.test(\"TestResult is found\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var id = pm.environment.get(\"createTestResultId\");",
									"    var createCandidateId = pm.environment.get(\"createCandidateId\");",
									"    var createExamId = pm.environment.get(\"createExamId\");",
									"    ",
									"    var entity = jsonData.data.getTestResultById;",
									"    pm.expect(entity.id).to.eql(id);",
									"    pm.expect(entity.name).to.eql(\"November Testing\");",
									"    pm.expect(entity.candidateId).to.eql(createCandidateId);",
									"    pm.expect(entity.category).to.eql(\"Cloud\");",
									"    pm.expect(entity.examId).to.eql(createExamId);",
									"    pm.expect(entity.taken).to.eql(\"2019-01-01\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\n  getTestResultById(id:{equal:\"{{createTestResultId}}\"}){\n    candidateId\n    category\n    examId\n    id\n    examId\n    name\n    taken\n  }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "QueryTestResultOutput (Name,Taken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35c8c12c-5cfe-42d0-8de3-66862da96f49",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(undefined);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\r\n  getTestResultsByNameAndTaken(\r\n    name:{contains:\"November\"}\r\n    taken:{greaterThan:\"2018-01-01\"}\r\n  ){\r\n    candidateId\r\n    category\r\n    examId\r\n    id\r\n    examId\r\n    name\r\n    taken\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateTestResult",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35c8c12c-5cfe-42d0-8de3-66862da96f49",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(undefined);",
									"});",
									"",
									"pm.test(\"TestResult is updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var id = pm.environment.get(\"createTestResultId\");",
									"    var createCandidateId = pm.environment.get(\"createCandidateId\");",
									"    var createExamId = pm.environment.get(\"createExamId\");",
									"    ",
									"    var entity = jsonData.data.updateTestResult;",
									"    pm.expect(entity.id).to.eql(id);",
									"    pm.expect(entity.name).to.eql(\"December Testing\");",
									"    pm.expect(entity.candidateId).to.eql(createCandidateId);",
									"    pm.expect(entity.category).to.eql(\"Cloud\");",
									"    pm.expect(entity.examId).to.eql(createExamId);",
									"    pm.expect(entity.taken).to.eql(\"2019-02-01\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "mutation{\r\n  updateTestResult(testresult: {\r\n    id:\"{{createTestResultId}}\"\r\n    name:\"December Testing\"\r\n    candidateId:\"{{createCandidateId}}\"\r\n    category:\"Cloud\"\r\n    examId:\"{{createExamId}}\"\r\n    taken:\"2019-02-01\"\r\n  }){\r\n    id\r\n    name \r\n    candidateId\r\n    category\r\n    examId\r\n    taken\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "VerifyTestResultWasUpdated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35c8c12c-5cfe-42d0-8de3-66862da96f49",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"No errors are returned\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors).to.eql(undefined);",
									"});",
									"",
									"pm.test(\"TestResult is updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    var id = pm.environment.get(\"createTestResultId\");",
									"    var createCandidateId = pm.environment.get(\"createCandidateId\");",
									"    var createExamId = pm.environment.get(\"createExamId\");",
									"    ",
									"    var entity = jsonData.data.getTestResultById;",
									"    pm.expect(entity.id).to.eql(id);",
									"    pm.expect(entity.name).to.eql(\"December Testing\");",
									"    pm.expect(entity.candidateId).to.eql(createCandidateId);",
									"    pm.expect(entity.category).to.eql(\"Cloud\");",
									"    pm.expect(entity.examId).to.eql(createExamId);",
									"    pm.expect(entity.taken).to.eql(\"2019-02-01\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/graphql",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "query {\n  getTestResultById(id:{equal:\"{{createTestResultId}}\"}){\n    candidateId\n    category\n    examId\n    id\n    examId\n    name\n    taken\n  }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "DeleteAllOrganizations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c04fa6d4-f9cc-422b-8f76-541cff3bcb7d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{admin_access_token}}"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation {\r\n  deleteAllOrganization{\r\n    message\r\n  }\r\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{endpoint}}/api/appadmin",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"appadmin"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteAllExams",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c04fa6d4-f9cc-422b-8f76-541cff3bcb7d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllExam {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteAllCandidateSearches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c04fa6d4-f9cc-422b-8f76-541cff3bcb7d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllCandidateSearch {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteAllTestResults",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c04fa6d4-f9cc-422b-8f76-541cff3bcb7d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"type": "text",
								"value": "Bearer {{access_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllTestResult {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a460ca94-64e8-4811-84f5-89f3cc83bc4e",
				"type": "text/javascript",
				"exec": [
					"var isRemote = pm.environment.get(\"endpoint\").indexOf(\"http://localhost\") < 0;",
					"pm.environment.set(\"isRemote\", isRemote);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "31e3d054-66f6-431d-bfdc-56256d40ec00",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}