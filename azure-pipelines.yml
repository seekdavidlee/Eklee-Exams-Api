pool:
  vmImage: 'vs2017-win2016'
  
variables:
- group: Deploy
- group: Postman

steps:

- task: PowerShell@2
  displayName: 'Build app and configure stack variables'
  inputs:
    targetType: 'inline'
    script: |
      $path="env:$env:Build_SourceBranchName" + "_AppPrefix"
      $stackName = (get-item $path -ErrorAction SilentlyContinue).Value
      if (!$stackName) { $stackName = $env:AppPrefix + $env:Build_SourceBranchName }
      $stackName = $stackName.ToLower().Replace("-", "")
      Write-Host "stackName: $stackName"
      Write-Host "##vso[task.setvariable variable=stackName;]$stackName"
      dotnet publish --configuration $env:BuildConfiguration --output $env:Build_ArtifactStagingDirectory
      $zipLocation = "$env:Build_ArtifactStagingDirectory\$env:Build_BuildNumber.zip"
      Compress-Archive -Path $env:Build_ArtifactStagingDirectory\* -DestinationPath $zipLocation
      Write-Host "##vso[task.setvariable variable=zipLocation;]$zipLocation"

- task: AzureResourceGroupDeployment@2
  displayName: 'Deploy stack resources'
  inputs:
    azureSubscription: '$(ServiceConnectionName)'
    resourceGroupName: '$(stackName)'
    location: '$(Location)'
    templateLocation: 'Linked artifact'
    csmFile: 'deployment\template.json'
    overrideParameters: '-stackName $(stackName) -clientId $(ClientId) -securityAudience $(Deploy.Security.Audience) -securityIssuers "$(Deploy.Security.Issuers)"'

- task: AzureRmWebAppDeployment@4
  displayName: 'Deploy app to stack slot'
  inputs:
    connectionType: 'AzureRM'
    azureSubscription: '$(ServiceConnectionName)'
    webAppName: '$(stackName)'
    deployToSlotOrASE: true
    resourceGroupName: '$(stackName)'
    slotName: 'staging'
    appType: 'functionApp'
    packageForLinux: '$(zipLocation)'

# - powershell: |
#       $url = "https://" + $env:stackName + "-staging.azurewebsites.net"
#       @{
#         values=@(
#         @{
#             key="endpoint";
#             value="$url";
#         }, 
#         @{
#             key="client_secret";
#             value="$env:Postman_client_secret";
#         }, 
#         @{
#             key="client_id";
#             value="$env:Postman_client_id";
#         }, 
#         @{
#             key="resource_id";
#             value="$env:Postman_resource_id";
#         }, 
#         @{
#             key="tenant_id";
#             value="$env:Postman_tenant_id";
#         }, 
#         @{
#             key="tenant1Id";
#             value="";
#         }, 
#         @{
#             key="clientId";
#             value="$env:clientId";
#         }, 
#         @{
#             key="clientSecret";
#             value="$env:clientSecret";
#         }, 
#         @{
#             key="tenant1user1";
#             value="$env:tenant1user1";
#         }, 
#         @{
#             key="tenant1user1password";
#             value="$env:tenant1user1password";
#         }, 
#         @{
#             key="resourceId";
#             value="$env:resourceId";
#         })
#       } | ConvertTo-Json -depth 100 | Out-File -encoding ASCII postman_environment.json
#       npm install
#       node_modules\.bin\newman run tests\Eklee.Exam.Api.postman_collection.json -e postman_environment.json --reporters junit --reporter-junit-export $env:Common_TestResultsDirectory\report.xml
#   env:
#     Postman_client_secret: $(Postman.client_secret)
#   displayName: 'Run integration tests'

# - task: PublishTestResults@2
#   displayName: 'Publish integration tests results'
#   inputs:
#     testResultsFormat: 'JUnit'
#     testResultsFiles: '**/*.xml' 
#     searchFolder: '$(Common.TestResultsDirectory)'

# - task: AzureAppServiceManage@0
#   displayName: 'Swap Staging with Production'
#   inputs:
#     azureSubscription: '$(ServiceConnectionName)'
#     action: 'Swap Slots'
#     sourceSlot: 'staging' 
#     webAppName: '$(stackName)'
#     resourceGroupName: '$(stackName)'
#     swapWithProduction: true