pool:
  vmImage: 'vs2017-win2016'
  
variables:
- group: Deploy
- group: Postman

steps:

- task: PowerShell@2
  displayName: 'Build app and configure stack variables'
  inputs:
    targetType: 'inline'
    script: |
      $path="env:$env:Build_SourceBranchName" + "_AppPrefix"
      $stackName = (get-item $path -ErrorAction SilentlyContinue).Value
      if (!$stackName) { $stackName = $env:AppPrefix + $env:Build_SourceBranchName }
      $stackName = $stackName.ToLower().Replace("-", "")
      Write-Host "stackName: $stackName"
      Write-Host "##vso[task.setvariable variable=stackName;]$stackName"
      dotnet publish --configuration $env:BuildConfiguration --output $env:Build_ArtifactStagingDirectory
      $zipLocation = "$env:Build_ArtifactStagingDirectory\$env:Build_BuildNumber.zip"
      Compress-Archive -Path $env:Build_ArtifactStagingDirectory\* -DestinationPath $zipLocation
      Write-Host "##vso[task.setvariable variable=zipLocation;]$zipLocation"

# - task: AzureResourceGroupDeployment@2
#   displayName: 'Deploy stack resources'
#   inputs:
#     azureSubscription: '$(ServiceConnectionName)'
#     resourceGroupName: '$(stackName)'
#     location: '$(Location)'
#     templateLocation: 'Linked artifact'
#     csmFile: 'deployment\template.json'
#     overrideParameters: '-stackName $(stackName) -clientId $(ClientId) -securityAudience $(Deploy.Security.Audience) -securityIssuers "$(Deploy.Security.Issuers)" -tenant1Issuer $(Deploy.Issuer)'

# - task: AzureRmWebAppDeployment@4
#   displayName: 'Deploy app to stack slot'
#   inputs:
#     connectionType: 'AzureRM'
#     azureSubscription: '$(ServiceConnectionName)'
#     webAppName: '$(stackName)'
#     deployToSlotOrASE: true
#     resourceGroupName: '$(stackName)'
#     slotName: 'staging'
#     appType: 'functionApp'
#     packageForLinux: '$(zipLocation)'

- task: PowerShell@2
  displayName: 'Run Postman integration tests'
  inputs:
    targetType: 'filePath'
    filePath: RunPostmanTests.ps1
    arguments: '-Tenant1Id $(tenant1Id) -Tenant1user1 $(tenant1user1) -Tenant1user1password "$(tenant1user1password)" -ResourceId "$(resourceId)" -ClientId $(clientId) -ClientSecret "$(clientSecret)" -StackName $(stackName)'

- task: PublishTestResults@2
  displayName: 'Publish integration tests results'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/*.xml' 
    searchFolder: '$(Common.TestResultsDirectory)'

# - task: AzureAppServiceManage@0
#   displayName: 'Swap Staging with Production'
#   inputs:
#     azureSubscription: '$(ServiceConnectionName)'
#     action: 'Swap Slots'
#     sourceSlot: 'staging' 
#     webAppName: '$(stackName)'
#     resourceGroupName: '$(stackName)'
#     swapWithProduction: true