pool:
  vmImage: 'windows-2019'
  
variables:
- group: Deploy
- group: Postman
- group: Azure

steps:

- task: PowerShell@2
  displayName: 'Build app and configure stack variables'
  inputs:
    targetType: 'inline'
    script: |
      $path="env:$env:Build_SourceBranchName" + "_AppPrefix"
      $stackName = (get-item $path -ErrorAction SilentlyContinue).Value
      if (!$stackName) { $stackName = $env:AppPrefix + $env:Build_SourceBranchName }
      $stackName = $stackName.ToLower().Replace("-", "")
      Write-Host "stackName: $stackName"
      Write-Host "##vso[task.setvariable variable=stackName;]$stackName"
      dotnet publish --configuration $env:BuildConfiguration --output $env:Build_ArtifactStagingDirectory
      $zipLocation = "$env:Build_ArtifactStagingDirectory\$env:Build_BuildNumber.zip"
      Compress-Archive -Path $env:Build_ArtifactStagingDirectory\* -DestinationPath $zipLocation
      Write-Host "##vso[task.setvariable variable=zipLocation;]$zipLocation"      

- task: AzureResourceGroupDeployment@2
  displayName: 'Deploy stack resources'
  inputs:
    azureSubscription: '$(Azure.Connection)'
    resourceGroupName: '$(stackName)'
    location: '$(Location)'
    templateLocation: 'Linked artifact'
    csmFile: 'deployment\template.json'
    overrideParameters: '-stackName "$(stackName)" -GraphQl_EnableMetrics "$(Deploy.GraphQl_EnableMetrics)" -GraphQl_ExposeExceptions "$(Deploy.GraphQl_ExposeExceptions)" -ServiceAccounts_0_AppId "$(Deploy.ServiceAccounts_0_AppId)" -ServiceAccounts_0_Issuer "$(Deploy.ServiceAccounts_0_Issuer)" -Admin_Audience "$(Deploy.Admin_Audience)" -Admin_Issuer "$(Deploy.Admin_Issuer)" -Security_Audience "$(Deploy.Security_Audience)" -Security_Issuers "$(Deploy.Security_Issuers)" -AdminApi_Endpoint "$(Deploy.AdminApi_Endpoint)" -AdminClient_ClientId "$(Deploy.AdminClient_ClientId)" -AdminClient_ClientSecret "$(Deploy.AdminClient_ClientSecret)" -AdminClient_Resource "$(Deploy.AdminClient_Resource)" -AdminClient_TenantId "$(Deploy.AdminClient_TenantId)"' 

- task: AzureRmWebAppDeployment@4
  displayName: 'Deploy app to stack slot'
  inputs:
    connectionType: 'AzureRM'
    azureSubscription: '$(Azure.Connection)'
    webAppName: '$(stackName)'
    deployToSlotOrASE: true
    resourceGroupName: '$(stackName)'
    slotName: 'staging'
    appType: 'functionApp'
    packageForLinux: '$(zipLocation)'

- task: PowerShell@2
  displayName: 'Run Postman integration tests'
  inputs:
    targetType: 'filePath'
    filePath: RunPostmanTests.ps1
  env:
    Postman_client_secret: $(Postman.client_secret)
    Postman_tenant1user1password: $(Postman.tenant1user1password)
    Postman_clientSecret: $(Postman.clientSecret)
    Postman_adminUser1password: $(Postman.adminUser1password)
    Postman_adminClientSecret: $(Postman.adminClientSecret)

- task: PublishTestResults@2
  displayName: 'Publish integration tests results'
  condition: 'succeededOrFailed()'
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '**/*.xml' 
    searchFolder: '$(Common.TestResultsDirectory)'

- task: AzureAppServiceManage@0
  displayName: 'Swap Staging with Production'
  inputs:
    azureSubscription: '$(Azure.Connection)'
    action: 'Swap Slots'
    sourceSlot: 'staging' 
    webAppName: '$(stackName)'
    resourceGroupName: '$(stackName)'
    swapWithProduction: true